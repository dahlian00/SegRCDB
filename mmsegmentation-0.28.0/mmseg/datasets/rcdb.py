# Copyright (c) OpenMMLab. All rights reserved.

from .builder import DATASETS
from .custom import CustomDataset


@DATASETS.register_module()
class RCDBDataset(CustomDataset):
    """HRF dataset.

    In segmentation map annotation for HRF, 0 stands for background, which is
    included in 2 categories. ``reduce_zero_label`` is fixed to False. The
    ``img_suffix`` is fixed to '.png' and ``seg_map_suffix`` is fixed to
    '.png'.
    """

    CLASSES = ('background','class1','class2','class3','class4','class5','class6','class7','class8','class9','class10','class11','class12','class13','class14','class15','class16','class17','class18','class19','class20','class21','class22','class23','class24','class25','class26','class27','class28','class29','class30','class31','class32','class33','class34','class35','class36','class37','class38','class39','class40','class41','class42','class43','class44','class45','class46','class47','class48','class49','class50','class51','class52','class53','class54','class55','class56','class57','class58','class59','class60','class61','class62','class63','class64','class65','class66','class67','class68','class69','class70','class71','class72','class73','class74','class75','class76','class77','class78','class79','class80','class81','class82','class83','class84','class85','class86','class87','class88','class89','class90','class91','class92','class93','class94','class95','class96','class97','class98','class99','class100','class101','class102','class103','class104','class105','class106','class107','class108','class109','class110','class111','class112','class113','class114','class115','class116','class117','class118','class119','class120','class121','class122','class123','class124','class125','class126','class127','class128','class129','class130','class131','class132','class133','class134','class135','class136','class137','class138','class139','class140','class141','class142','class143','class144','class145','class146','class147','class148','class149','class150','class151','class152','class153','class154','class155','class156','class157','class158','class159','class160','class161','class162','class163','class164','class165','class166','class167','class168','class169','class170','class171','class172','class173','class174','class175','class176','class177','class178','class179','class180','class181','class182','class183','class184','class185','class186','class187','class188','class189','class190','class191','class192','class193','class194','class195','class196','class197','class198','class199','class200','class201','class202','class203','class204','class205','class206','class207','class208','class209','class210','class211','class212','class213','class214','class215','class216','class217','class218','class219','class220','class221','class222','class223','class224','class225','class226','class227','class228','class229','class230','class231','class232','class233','class234','class235','class236','class237','class238','class239','class240','class241','class242','class243','class244','class245','class246','class247','class248','class249','class250','class251','class252','class253','class254')
    PALLET = None
    #PALETTE = [[112,237,254], [162, 54, 27], [243, 189, 135], [27, 54, 135], [54, 189, 135], [54, 243, 135], [0, 162, 216], [54, 0, 27], [189, 135, 81], [243, 108, 108], [135, 243, 243], [108, 189, 189], [135, 162, 189], [81, 243, 54], [27, 108, 108], [0, 54, 135], [243, 216, 189], [189, 162, 54], [135, 162, 162], [81, 0, 27], [0, 108, 135], [135, 81, 243], [135, 162, 54], [81, 81, 243], [54, 81, 27], [135, 243, 135], [189, 216, 27], [27, 162, 216], [135, 81, 216], [81, 54, 27], [243, 81, 0], [243, 216, 135], [81, 81, 0], [135, 27, 81], [162, 54, 81], [243, 162, 243], [0, 162, 243], [216, 27, 135], [243, 108, 135], [189, 162, 243], [189, 81, 0], [189, 108, 81], [216, 216, 135], [108, 189, 243], [27, 189, 135], [108, 216, 108], [81, 135, 108], [216, 0, 108], [27, 81, 243], [81, 135, 162], [0, 54, 243], [243, 243, 135], [0, 135, 135], [162, 162, 216], [81, 243, 216], [216, 135, 135], [162, 54, 216], [162, 135, 189], [108, 54, 54], [54, 189, 81], [27, 54, 81], [81, 135, 54], [54, 189, 0], [216, 135, 0], [81, 54, 243], [162, 135, 81], [0, 216, 189], [27, 27, 162], [243, 27, 108], [243, 135, 189], [0, 108, 108], [81, 189, 54], [162, 81, 216], [243, 27, 216], [162, 81, 108], [27, 27, 108], [108, 189, 27], [81, 243, 0], [243, 189, 189], [189, 27, 243], [54, 216, 81], [243, 243, 243], [189, 243, 216], [54, 27, 189], [216, 162, 27], [243, 81, 81], [81, 162, 216], [81, 0, 81], [0, 135, 54], [162, 162, 0], [81, 0, 54], [108, 81, 189], [108, 0, 54], [216, 54, 162], [108, 135, 0], [189, 81, 243], [162, 108, 162], [162, 243, 216], [108, 189, 81], [0, 243, 108], [162, 189, 27], [27, 0, 243], [27, 27, 81], [54, 162, 81], [0, 54, 27], [0, 243, 0], [189, 108, 135], [135, 27, 27], [27, 0, 216], [189, 0, 162], [81, 0, 108], [189, 216, 81], [27, 162, 0], [135, 0, 216], [162, 0, 243], [27, 108, 0], [243, 189, 108], [54, 27, 108], [54, 27, 27], [81, 162, 108], [189, 81, 54], [216, 189, 189], [162, 108, 108], [216, 108, 54], [189, 135, 108], [108, 108, 81], [81, 81, 189], [0, 27, 27], [108, 81, 216], [135, 27, 54], [243, 27, 162], [54, 108, 54], [216, 108, 216], [135, 27, 243], [0, 162, 0], [135, 189, 162], [189, 135, 0], [81, 162, 81], [189, 108, 162], [0, 135, 189], [54, 0, 135], [135, 135, 108], [189, 216, 189], [135, 162, 81], [54, 216, 0], [0, 189, 216], [0, 0, 162], [216, 216, 54], [243, 108, 216], [0, 54, 162], [135, 189, 135], [81, 81, 27], [81, 135, 81], [81, 216, 135], [108, 189, 54], [135, 243, 216], [216, 0, 162], [216, 81, 54], [243, 135, 135], [108, 162, 189], [54, 243, 243], [189, 54, 162], [189, 0, 135], [0, 243, 54], [189, 0, 108], [108, 108, 54], [81, 243, 81], [162, 0, 189], [54, 108, 81], [135, 189, 189], [27, 216, 27], [0, 216, 216], [108, 27, 189], [81, 189, 216], [54, 81, 54], [135, 243, 54], [81, 189, 108], [189, 108, 216], [189, 135, 135], [81, 135, 243], [216, 189, 81], [162, 0, 135], [243, 108, 189], [81, 81, 108], [27, 0, 108], [189, 108, 54], [27, 0, 162], [189, 162, 189], [54, 189, 216], [27, 216, 189], [189, 27, 0], [135, 135, 216], [0, 0, 135], [216, 162, 81], [27, 189, 216], [27, 189, 162], [54, 216, 108], [162, 162, 189], [243, 0, 54], [135, 243, 0], [243, 216, 81], [0, 81, 108], [189, 135, 216], [27, 54, 243], [27, 162, 162], [54, 135, 108], [135, 81, 162], [162, 27, 54], [216, 108, 135], [162, 216, 162], [162, 216, 135], [135, 54, 54], [0, 135, 108], [243, 108, 81], [0, 135, 0], [162, 216, 0], [243, 189, 216], [243, 243, 0], [108, 135, 27], [108, 243, 162], [54, 216, 243], [108, 27, 162], [0, 189, 108], [135, 108, 243], [81, 243, 243], [0, 135, 216], [27, 135, 162], [216, 0, 0], [189, 189, 243], [189, 27, 135], [162, 189, 189], [216, 81, 189], [135, 54, 135], [27, 27, 0], [54, 243, 54], [135, 135, 243], [81, 243, 162], [108, 243, 108], [189, 81, 27], [81, 243, 135], [216, 54, 81], [108, 243, 135], [162, 81, 0], [135, 135, 135], [189, 0, 27], [54, 81, 81], [135, 54, 27], [243, 189, 81], [108, 108, 0], [243, 243, 162], [54, 0, 0], [162, 27, 243], [0, 243, 162], [108, 54, 27], [135, 108, 108]]


    def __init__(self, **kwargs):
        super(RCDBDataset, self).__init__(
            img_suffix='.png',
            seg_map_suffix='.png',
            reduce_zero_label=False,
            ignore_index=255,
            **kwargs)


# # Copyright (c) OpenMMLab. All rights reserved.
# import os.path as osp

# import mmcv
# import numpy as np
# from PIL import Image

# from .builder import DATASETS
# from .custom import CustomDataset


# @DATASETS.register_module()
# class RCDBDataset(CustomDataset):
#     """ADE20K dataset.

#     In segmentation map annotation for ADE20K, 0 stands for background, which
#     is not included in 150 categories. ``reduce_zero_label`` is fixed to True.
#     The ``img_suffix`` is fixed to '.jpg' and ``seg_map_suffix`` is fixed to
#     '.png'.
#     """
#     CLASSES = ('0','1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52','53','54','55','56','57','58','59','60','61','62','63','64','65','66','67','68','69','70','71','72','73','74','75','76','77','78','79','80','81','82','83','84','85','86','87','88','89','90','91','92','93','94','95','96','97','98','99','100','101','102','103','104','105','106','107','108','109','110','111','112','113','114','115','116','117','118','119','120','121','122','123','124','125','126','127','128','129','130','131','132','133','134','135','136','137','138','139','140','141','142','143','144','145','146','147','148','149','150','151','152','153','154','155','156','157','158','159','160','161','162','163','164','165','166','167','168','169','170','171','172','173','174','175','176','177','178','179','180','181','182','183','184','185','186','187','188','189','190','191','192','193','194','195','196','197','198','199','200','201','202','203','204','205','206','207','208','209','210','211','212','213','214','215','216','217','218','219','220','221','222','223','224','225','226','227','228','229','230','231','232','233','234','235','236','237','238','239','240','241','242','243','244','245','246','247','248','249','250','251','252','253','254','255')

#     PALETTE = [[125, 125, 125], [162, 54, 27], [243, 189, 135], [27, 54, 135], [54, 189, 135], [54, 243, 135], [0, 162, 216], [54, 0, 27], [189, 135, 81], [243, 108, 108], [135, 243, 243], [108, 189, 189], [135, 162, 189], [81, 243, 54], [27, 108, 108], [0, 54, 135], [243, 216, 189], [189, 162, 54], [135, 162, 162], [81, 0, 27], [0, 108, 135], [135, 81, 243], [135, 162, 54], [81, 81, 243], [54, 81, 27], [135, 243, 135], [189, 216, 27], [27, 162, 216], [135, 81, 216], [81, 54, 27], [243, 81, 0], [243, 216, 135], [81, 81, 0], [135, 27, 81], [162, 54, 81], [243, 162, 243], [0, 162, 243], [216, 27, 135], [243, 108, 135], [189, 162, 243], [189, 81, 0], [189, 108, 81], [216, 216, 135], [108, 189, 243], [27, 189, 135], [108, 216, 108], [81, 135, 108], [216, 0, 108], [27, 81, 243], [81, 135, 162], [0, 54, 243], [243, 243, 135], [0, 135, 135], [162, 162, 216], [81, 243, 216], [216, 135, 135], [162, 54, 216], [162, 135, 189], [108, 54, 54], [54, 189, 81], [27, 54, 81], [81, 135, 54], [54, 189, 0], [216, 135, 0], [81, 54, 243], [162, 135, 81], [0, 216, 189], [27, 27, 162], [243, 27, 108], [243, 135, 189], [0, 108, 108], [81, 189, 54], [162, 81, 216], [243, 27, 216], [162, 81, 108], [27, 27, 108], [108, 189, 27], [81, 243, 0], [243, 189, 189], [189, 27, 243], [54, 216, 81], [243, 243, 243], [189, 243, 216], [54, 27, 189], [216, 162, 27], [243, 81, 81], [81, 162, 216], [81, 0, 81], [0, 135, 54], [162, 162, 0], [81, 0, 54], [108, 81, 189], [108, 0, 54], [216, 54, 162], [108, 135, 0], [189, 81, 243], [162, 108, 162], [162, 243, 216], [108, 189, 81], [0, 243, 108], [162, 189, 27], [27, 0, 243], [27, 27, 81], [54, 162, 81], [0, 54, 27], [0, 243, 0], [189, 108, 135], [135, 27, 27], [27, 0, 216], [189, 0, 162], [81, 0, 108], [189, 216, 81], [27, 162, 0], [135, 0, 216], [162, 0, 243], [27, 108, 0], [243, 189, 108], [54, 27, 108], [54, 27, 27], [81, 162, 108], [189, 81, 54], [216, 189, 189], [162, 108, 108], [216, 108, 54], [189, 135, 108], [108, 108, 81], [81, 81, 189], [0, 27, 27], [108, 81, 216], [135, 27, 54], [243, 27, 162], [54, 108, 54], [216, 108, 216], [135, 27, 243], [0, 162, 0], [135, 189, 162], [189, 135, 0], [81, 162, 81], [189, 108, 162], [0, 135, 189], [54, 0, 135], [135, 135, 108], [189, 216, 189], [135, 162, 81], [54, 216, 0], [0, 189, 216], [0, 0, 162], [216, 216, 54], [243, 108, 216], [0, 54, 162], [135, 189, 135], [81, 81, 27], [81, 135, 81], [81, 216, 135], [108, 189, 54], [135, 243, 216], [216, 0, 162], [216, 81, 54], [243, 135, 135], [108, 162, 189], [54, 243, 243], [189, 54, 162], [189, 0, 135], [0, 243, 54], [189, 0, 108], [108, 108, 54], [81, 243, 81], [162, 0, 189], [54, 108, 81], [135, 189, 189], [27, 216, 27], [0, 216, 216], [108, 27, 189], [81, 189, 216], [54, 81, 54], [135, 243, 54], [81, 189, 108], [189, 108, 216], [189, 135, 135], [81, 135, 243], [216, 189, 81], [162, 0, 135], [243, 108, 189], [81, 81, 108], [27, 0, 108], [189, 108, 54], [27, 0, 162], [189, 162, 189], [54, 189, 216], [27, 216, 189], [189, 27, 0], [135, 135, 216], [0, 0, 135], [216, 162, 81], [27, 189, 216], [27, 189, 162], [54, 216, 108], [162, 162, 189], [243, 0, 54], [135, 243, 0], [243, 216, 81], [0, 81, 108], [189, 135, 216], [27, 54, 243], [27, 162, 162], [54, 135, 108], [135, 81, 162], [162, 27, 54], [216, 108, 135], [162, 216, 162], [162, 216, 135], [135, 54, 54], [0, 135, 108], [243, 108, 81], [0, 135, 0], [162, 216, 0], [243, 189, 216], [243, 243, 0], [108, 135, 27], [108, 243, 162], [54, 216, 243], [108, 27, 162], [0, 189, 108], [135, 108, 243], [81, 243, 243], [0, 135, 216], [27, 135, 162], [216, 0, 0], [189, 189, 243], [189, 27, 135], [162, 189, 189], [216, 81, 189], [135, 54, 135], [27, 27, 0], [54, 243, 54], [135, 135, 243], [81, 243, 162], [108, 243, 108], [189, 81, 27], [81, 243, 135], [216, 54, 81], [108, 243, 135], [162, 81, 0], [135, 135, 135], [189, 0, 27], [54, 81, 81], [135, 54, 27], [243, 189, 81], [108, 108, 0], [243, 243, 162], [54, 0, 0], [162, 27, 243], [0, 243, 162], [108, 54, 27], [135, 108, 108], [243, 54, 189]]


#     def __init__(self, **kwargs):
#         super(RCDBDataset, self).__init__(
#             img_suffix='.png',
#             seg_map_suffix='.png',
#             #reduce_zero_label=True,
#             reduce_zero_label=False,
#             **kwargs)

#     def results2img(self, results, imgfile_prefix, to_label_id, indices=None):
#         """Write the segmentation results to images.

#         Args:
#             results (list[ndarray]): Testing results of the
#                 dataset.
#             imgfile_prefix (str): The filename prefix of the png files.
#                 If the prefix is "somepath/xxx",
#                 the png files will be named "somepath/xxx.png".
#             to_label_id (bool): whether convert output to label_id for
#                 submission.
#             indices (list[int], optional): Indices of input results, if not
#                 set, all the indices of the dataset will be used.
#                 Default: None.

#         Returns:
#             list[str: str]: result txt files which contains corresponding
#             semantic segmentation images.
#         """
#         if indices is None:
#             indices = list(range(len(self)))

#         mmcv.mkdir_or_exist(imgfile_prefix)
#         result_files = []
#         for result, idx in zip(results, indices):

#             filename = self.img_infos[idx]['filename']
#             basename = osp.splitext(osp.basename(filename))[0]

#             png_filename = osp.join(imgfile_prefix, f'{basename}.png')

#             # The  index range of official requirement is from 0 to 150.
#             # But the index range of output is from 0 to 149.
#             # That is because we set reduce_zero_label=True.
#             #result = result + 1

#             output = Image.fromarray(result.astype(np.uint8))
#             output.save(png_filename)
#             result_files.append(png_filename)

#         return result_files

#     def format_results(self,
#                        results,
#                        imgfile_prefix,
#                        to_label_id=True,
#                        indices=None):
#         """Format the results into dir (standard format for ade20k evaluation).

#         Args:
#             results (list): Testing results of the dataset.
#             imgfile_prefix (str | None): The prefix of images files. It
#                 includes the file path and the prefix of filename, e.g.,
#                 "a/b/prefix".
#             to_label_id (bool): whether convert output to label_id for
#                 submission. Default: False
#             indices (list[int], optional): Indices of input results, if not
#                 set, all the indices of the dataset will be used.
#                 Default: None.

#         Returns:
#             tuple: (result_files, tmp_dir), result_files is a list containing
#                the image paths, tmp_dir is the temporal directory created
#                 for saving json/png files when img_prefix is not specified.
#         """

#         if indices is None:
#             indices = list(range(len(self)))

#         assert isinstance(results, list), 'results must be a list.'
#         assert isinstance(indices, list), 'indices must be a list.'

#         result_files = self.results2img(results, imgfile_prefix, to_label_id,
#                                         indices)
#         return result_files
